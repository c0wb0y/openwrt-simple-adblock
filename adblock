#!/bin/sh /etc/rc.common
# adblock init-script utilizing procd version 3.3.3 by stangri based on bole5's script.

START=99
USE_PROCD=1

EXTRA_COMMANDS="update setup"
EXTRA_HELP="	update  Updates the AdBlock script by downloading it from github repo
	setup   Fully sets up AdBlock script"

H_TMP='/tmp/hosts.bad.tmp'
D_TMP='/tmp/domains.bad.tmp'
W_TMP='/tmp/hosts.white.tmp'
B_TMP='/tmp/adblock.hosts'
logmsg=''

[ -s /bin/uclient-fetch ] && CLIENT='/bin/uclient-fetch' || CLIENT='/usr/bin/wget'

output () {
    local level
    [ $# -eq 2 ] && level=$2 || level=0
    if [ $level -eq 3 ]; then [ $verbosity -eq 2 ] && level=2 || level=1; fi
	[ $level -ne 0 -a $verbosity -ne $level ] && return 0
	[ -t 1 ] && echo -e -n "$1"
	[ $(echo -e -n $1 | wc -l) -gt 0 ] && logger -t "adblock[$$]" "$(echo -e -n ${logmsg}${1})" && logmsg='' || logmsg=${logmsg}${1}
}

update () {
    echo -e -n '/etc/init.d/adblock script update... '
    $CLIENT --no-check-certificate -qO /etc/init.d/adblock.new https://raw.githubusercontent.com/stangri/openwrt-simple-adblock/master/adblock && mv /etc/init.d/adblock.new /etc/init.d/adblock && chmod +x /etc/init.d/adblock && echo -e -n  '[OK]\n' && return 0 || ( echo -e -n '[FAIL]\n' && return 1 )
}

setup () {
    local pixelservip=198.18.0.1
    local pixelservipv6='::ffff:c612:0001'

	update
	[ $? -ne 0 ] && output "Failed to fetch AdBlock script from github, check if wget/libopenssl or uclient-fetch/libustream-mbedtls are installed.\n" && exit -1

    output 'Packages setup... '
    opkg update  >/dev/null  2>&1
    opkg install coreutils-sort >/dev/null 2>&1
    
    if [ -s /bin/uclient-fetch ]; then
    	[ ! -s /lib/libustream-ssl.so ] && opkg install libustream-mbedtls >/dev/null 2>&1
    else
    	opkg install wget libopenssl >/dev/null 2>&1
    fi
	output '[OK]\n'
    
    output 'PixelServ setup... '
    if [ "$(uci -q get uhttpd.adblockpixelserv.listen_http)" = "" ]; then
	    mkdir /www_adblock
	    echo -ne 'GIF89a1010\x8000\xff\xff\xff000!\xf9\x0400000,000010100\x02\x02D10;' | tr 01 '\000\001' > /www_adblock/blank.gif
	    uci add uhttpd uhttpd
	    uci rename uhttpd.@uhttpd[-1]='adblockpixelserv'
	    uci add_list uhttpd.@uhttpd[-1].listen_http='0.0.0.0:65534'
		uci add_list uhttpd.@uhttpd[-1].listen_http='[::]:65534'
	    uci set uhttpd.@uhttpd[-1].home='/www_adblock'
	    uci set uhttpd.@uhttpd[-1].error_page='/blank.gif'
	    uci set uhttpd.@uhttpd[-1].index_page='blank.gif'
		uci set uhttpd.@uhttpd[-1].max_connections=25
	    uci set uhttpd.@uhttpd[-1].rfc1918_filter='1'
		uci set uhttpd.@uhttpd[-1].no_symlinks=1
		uci set uhttpd.@uhttpd[-1].no_dirlists=1
		uci set uhttpd.@uhttpd[-1].http_keepalive=0
		uci set uhttpd.@uhttpd[-1].script_timeout=0
		uci set uhttpd.@uhttpd[-1].network_timeout=1
	    uci commit uhttpd
	    /etc/init.d/uhttpd restart
    fi
    if [ "$(uci -q get uhttpd.adblockpixelservssl.listen_http)" = "" ]; then
	    mkdir /www_adblock
	    echo -ne 'GIF89a1010\x8000\xff\xff\xff000!\xf9\x0400000,000010100\x02\x02D10;' | tr 01 '\000\001' > /www_adblock/blank.gif
	    uci add uhttpd uhttpd
	    uci rename uhttpd.@uhttpd[-1]='adblockpixelservssl'
	    uci add_list uhttpd.@uhttpd[-1].listen_http='0.0.0.0:65535'
		uci add_list uhttpd.@uhttpd[-1].listen_http='[::]:65535'
	    uci set uhttpd.@uhttpd[-1].home='/www_adblock'
	    uci set uhttpd.@uhttpd[-1].error_page='/blank.gif'
	    uci set uhttpd.@uhttpd[-1].index_page='blank.gif'
		uci set uhttpd.@uhttpd[-1].max_connections=25
	    uci set uhttpd.@uhttpd[-1].rfc1918_filter='1'
		uci set uhttpd.@uhttpd[-1].no_symlinks=1
		uci set uhttpd.@uhttpd[-1].no_dirlists=1
		uci set uhttpd.@uhttpd[-1].http_keepalive=0
		uci set uhttpd.@uhttpd[-1].script_timeout=0
		uci set uhttpd.@uhttpd[-1].network_timeout=0
	    uci commit uhttpd
	    /etc/init.d/uhttpd restart
    fi
	output '[OK]\n'
    
    output 'Firewall setup... '
#	sed -i '/192.168.3.254/d' /etc/firewall.user
    grep -q "iptables -w -t nat -A prerouting_rule -p tcp -d $pixelservip --dport 80 -j REDIRECT --to-ports 65534" /etc/firewall.user || echo "iptables -w -t nat -A prerouting_rule -p tcp -d $pixelservip --dport 80 -j REDIRECT --to-ports 65534" >> /etc/firewall.user
    grep -q "iptables -w -t nat -A prerouting_rule -p tcp -d $pixelservip --dport 443 -j REDIRECT --to-ports 65535" /etc/firewall.user || echo "iptables -w -t nat -A prerouting_rule -p tcp -d $pixelservip --dport 443 -j REDIRECT --to-ports 65535" >> /etc/firewall.user
    grep -q "iptables -w -t nat -A prerouting_rule -p tcp -d $pixelservip -j ACCEPT" /etc/firewall.user || echo "iptables -w -t nat -A prerouting_rule -p tcp -d $pixelservip -j ACCEPT" >> /etc/firewall.user
    grep -q "iptables -w -A forwarding_rule -d $pixelservip -j REJECT" /etc/firewall.user || echo "iptables -w -A forwarding_rule -d $pixelservip -j REJECT" >> /etc/firewall.user
    /etc/init.d/firewall reload >/dev/null  2>&1
    output '[OK]\n'

    output 'AdBlock config setup... '
    [ -f /etc/config/adblock ] && rm /etc/config/adblock
    touch /etc/config/adblock
    uci set adblock.config='adblock'
    uci set adblock.config.enabled='1'
    uci set adblock.config.verbosity='2'
    uci set adblock.config.pixel_server_ip="$pixelservip"
    uci set adblock.config.hosts_file='/tmp/hosts/hosts.bad'
    uci add_list adblock.config.whitelist_domains='github.com'
    uci add_list adblock.config.whitelist_domains='raw.githubusercontent.com'
#   uci add_list adblock.config.blacklist_domains='adblocktesting.com'
	uci add_list adblock.config.bad_hosts='https://raw.githubusercontent.com/stangri/openwrt-simple-adblock/master/hosts.blocked'
	uci add_list adblock.config.bad_domains='https://raw.githubusercontent.com/stangri/openwrt-simple-adblock/master/domains.blocked'
	uci add_list adblock.config.whitelist_urls='https://raw.githubusercontent.com/stangri/openwrt-simple-adblock/master/domains.whitelisted'
	uci add_list adblock.config.bad_hosts='http://pgl.yoyo.org/as/serverlist.php?hostformat=hosts&showintro=1&mimetype=plaintext'	# 63Kb
	uci add_list adblock.config.bad_hosts='http://www.mvps.org/winhelp2002/hosts.txt'												# 499Kb
	uci add_list adblock.config.bad_hosts='http://www.malwaredomainlist.com/hostslist/hosts.txt'									# 48Kb
	uci add_list adblock.config.bad_hosts='http://adaway.org/hosts.txt'																# 13Kb
	uci add_list adblock.config.bad_hosts='http://someonewhocares.org/hosts/hosts'													# 353Kb
	uci add_list adblock.config.bad_hosts='https://zeustracker.abuse.ch/blocklist.php?download=hostfile'							# 12Kb
	uci add_list adblock.config.bad_domains='https://palevotracker.abuse.ch/blocklists.php?download=domainblocklist'				# 1Kb
	uci add_list adblock.config.bad_domains='http://mirror1.malwaredomains.com/files/justdomains'									# 315Kb
	uci add_list adblock.config.bad_domains='https://s3.amazonaws.com/lists.disconnect.me/simple_malvertising.txt'					# 93Kb
	uci add_list adblock.config.bad_domains='http://dshield.org/feeds/suspiciousdomains_High.txt'									# 69Kb
#	uci add_list adblock.config.bad_hosts='http://sysctl.org/cameleon/hosts.win'													# 638Kb
#	uci add_list adblock.config.bad_hosts='http://hosts-file.net/.\ad_servers.txt'													# 1.7Mb
#	uci add_list adblock.config.bad_hosts='http://hostsfile.mine.nu/Hosts'															# 2.8Mb
#	uci add_list adblock.config.bad_hosts='http://support.it-mate.co.uk/downloads/hosts.txt'										# 11.3Mb
    uci commit adblock
    grep -q '30 3 1 \* \* /etc/init.d/adblock reload 2>&1 >> /tmp/adblock.log' /etc/crontabs/root || echo '30 3 1 * * /etc/init.d/adblock reload 2>&1 >> /tmp/adblock.log' >> /etc/crontabs/root
    [ ! -f /etc/banner.orig ] && cp /etc/banner /etc/banner.orig && sed -i '$i \[ -f /etc/banner.orig ] && cp /etc/banner.orig /etc/banner' /etc/rc.local
    output '[OK]\n'

    exit 0
}

adblock_enabled () {
    local enabled
    config_get_bool enabled 'config' 'enabled' 0
    [ $enabled -gt 0 ] && return 0
    output "AdBlock is not enabled in the config file!\n"
    output "To enable, run 'uci set adblock.config.enabled=1'\n"
    return 1
}

stop_adblocking () {
    config_get hosts_file           'config' 'hosts_file' '/tmp/hosts/hosts.bad'
    config_get verbosity            'config' 'verbosity' '0'
    config_get force_dns            'config' 'force_dns' '0'

	local ip=$(uci -q -P/var/state get network.lan.ipaddr)
	local ip6=$(echo $(uci -q -P/var/state get network.globals.ula_prefix) | cut -d/ -f1) && [ "$ip6" ] && ip6=${ip6}1
    local flag=0
	if [ $force_dns -ne 0 ]; then
		grep -q "ip6tables -t nat -A PREROUTING -i br-lan -p udp --dport 53 -j DNAT --to-destination \[$ip6\]" /etc/firewall.user && flag=1; sed -i '/ip6tables -t nat -A PREROUTING -i br-lan -p udp --dport 53 -j DNAT --to-destination/d' /etc/firewall.user
		grep -q "ip6tables -t nat -A PREROUTING -i br-lan -p tcp --dport 53 -j DNAT --to-destination \[$ip6\]" /etc/firewall.user && flag=1; sed -i '/ip6tables -t nat -A PREROUTING -i br-lan -p tcp --dport 53 -j DNAT --to-destination/d' /etc/firewall.user
		grep -q "iptables -t nat -A prerouting_rule -i br-lan -p udp --dport 53 -j DNAT --to $ip" /etc/firewall.user && flag=1; sed -i '/iptables -t nat -A prerouting_rule -i br-lan -p udp --dport 53 -j DNAT --to/d' /etc/firewall.user
		grep -q "iptables -t nat -A prerouting_rule -i br-lan -p tcp --dport 53 -j DNAT --to $ip" /etc/firewall.user && flag=1; sed -i '/iptables -t nat -A prerouting_rule -i br-lan -p tcp --dport 53 -j DNAT --to/d' /etc/firewall.user
	fi
	if [ $flag -eq 1 ]; then
		/etc/init.d/firewall reload >/dev/null  2>&1
		[ $? -eq 0 ] && output 'No longer forcing local DNS server.\n' || output 'ERROR: Failed to reload firewall!\n'
	fi
    [ -f /etc/banner.orig ] && cp /etc/banner.orig /etc/banner
    [ -f $hosts_file ] && mv $hosts_file $B_TMP
    /etc/init.d/dnsmasq restart >/dev/null  2>&1
	[ $? -eq 0 ] && output "AdBlock disabled.\n" || output "ERROR: Failed to restart DNSMASQ!\n"
}

start_adblocking () {
    config_get hosts_file           'config' 'hosts_file' '/tmp/hosts/hosts.bad'
    config_get verbosity            'config' 'verbosity' '0'
    config_get force_dns            'config' 'force_dns' '0'

	if [ -s $B_TMP -a ! "$1" = "reload" ]; then
		output 'Found existing AdBlock data file, reusing it... '
		mv $B_TMP $hosts_file && output '[OK]\n' || output '[FAIL]\n'
	else
		create_bad_hosts_file
	fi
		
	if [ $force_dns -ne 0 ]; then
		local ip=$(uci -q -P/var/state get network.lan.ipaddr)
		local ip6=$(echo $(uci -q -P/var/state get network.globals.ula_prefix) | cut -d/ -f1) && [ "$ip6" ] && ip6=${ip6}1
		local flag=0
		local label
		if [ -n "$ip" -a -n "$ip6" ]; then
			grep -q "ip6tables -t nat -A PREROUTING -i br-lan -p udp --dport 53 -j DNAT --to-destination \[$ip6\]" /etc/firewall.user || flag=1; echo "ip6tables -t nat -A PREROUTING -i br-lan -p udp --dport 53 -j DNAT --to-destination [$ip6]" >> /etc/firewall.user
			grep -q "ip6tables -t nat -A PREROUTING -i br-lan -p tcp --dport 53 -j DNAT --to-destination \[$ip6\]" /etc/firewall.user || flag=1; echo "ip6tables -t nat -A PREROUTING -i br-lan -p tcp --dport 53 -j DNAT --to-destination [$ip6]" >> /etc/firewall.user
		fi
		if [ -n "$ip" ]; then
			grep -q "iptables -t nat -A prerouting_rule -i br-lan -p udp --dport 53 -j DNAT --to $ip" /etc/firewall.user || flag=1; echo "iptables -t nat -A prerouting_rule -i br-lan -p udp --dport 53 -j DNAT --to $ip" >> /etc/firewall.user
			grep -q "iptables -t nat -A prerouting_rule -i br-lan -p tcp --dport 53 -j DNAT --to $ip" /etc/firewall.user || flag=1; echo "iptables -t nat -A prerouting_rule -i br-lan -p tcp --dport 53 -j DNAT --to $ip" >> /etc/firewall.user
			[ -z $ip6 ] && label="$ip" || label="$ip/$ip6"
			if [ $flag -eq 1 ]; then
				/etc/init.d/firewall reload >/dev/null  2>&1
				[ $? -eq 0 ] && output "Forcing local DNS server: $label.\n" || output 'ERROR: Failed to restart firewall!\n'
			else
				output "Already forcing local DNS server: $label.\n"
			fi
		else
			output 'ERROR: Failed to obtain LAN IP address for DNS forcing!\n'
		fi
	fi

	if [ -s $hosts_file ]; then
		/etc/init.d/dnsmasq restart >/dev/null  2>&1
		if [ $? -eq 0 ]; then 
			output "AdBlock enabled: blocking $(wc -l < $hosts_file) domains.\n"
			[ -f /etc/banner.orig ] && cp /etc/banner.orig /etc/banner && sed -i 's|\(([^)]*\)|\1 + AdBlock|' /etc/banner
		else 
			output 'ERROR: Failed to restart DNSMASQ!\n'
			exit 1
		fi
	else
		output 'ERROR: Failed to create AdBlock data file!\n'
		exit 1
	fi    
}

create_bad_hosts_file () {
    local hf
    local expr
   	local label
   	local i
   	local flag=

    config_get pixelserv_ip         'config' 'pixel_server_ip' '127.0.0.1'
    config_get bad_hosts            'config' 'bad_hosts'
    config_get bad_domains          'config' 'bad_domains'
    config_get whitelist_domains    'config' 'whitelist_domains'
    config_get blacklist_domains    'config' 'blacklist_domains'
    config_get whitelist_urls       'config' 'whitelist_urls'

    [ ! -d /tmp/hosts/ ] && mkdir -p /tmp/hosts/
	for i in $(uci -q get dhcp.@dnsmasq[0].addnhosts); do [ "$i" = "/tmp/hosts" ] && flag=1; done
	[ -z "$flag" ] && uci add_list dhcp.@dnsmasq[0].addnhosts='/tmp/hosts' && uci commit dhcp

    touch $H_TMP
    touch $D_TMP
    touch $W_TMP
    output 'Downloading bad hosts... ' 1
    for hf in ${bad_hosts}; do
    	label=$(echo $hf | awk -F/ '{print $3}')
        output "Bad hosts DL: $label... " 2 && $CLIENT --no-check-certificate -qO- "${hf}" >> $H_TMP && output '[OK]\n' 2 || output '[FAIL]\n' 2
    done
    output '[OK]\n' 1
    
    for hf in ${blacklist_domains}; do echo "$hf" >> $D_TMP; done
    output 'Downloading bad domains... ' 1
    for hf in ${bad_domains}; do
    	label=$(echo $hf | awk -F/ '{print $3}')
        output "Bad domains DL: $label... " 2 && $CLIENT --no-check-certificate -qO- "${hf}" >> $D_TMP && output '[OK]\n' 2 || output '[FAIL]\n' 2
    done
    sed '/^#/!s/^/127.0.0.1 /' $D_TMP >> $H_TMP
    output '[OK]\n' 1

    output 'Downloading whitelisted domains... ' 1
    for hf in ${whitelist_urls}; do
    	label=$(echo $hf | awk -F/ '{print $3}')
        output "Whitelisted domains DL: $label... " 2 && $CLIENT --no-check-certificate -qO- "${hf}" >> $W_TMP && output '[OK]\n' 2 || output '[FAIL]\n' 2
    done
    output '[OK]\n' 1

    output 'Optimizing hosts file... ' 1
    output 'Removing hosts file duplicates... ' 2 && sed -i '/localhost/d;s/^0\.0\.0\.0.//;s/^127\.0\.0\.1.//;s/[[:cntrl:]]$//;s/[[:cntrl:]]$/ /;/^#/d;/^$/d;s/[[:space:]]*#.*$//;s/^ //;s/^  //;/^[[:blank:]]*$/d;s|^|'$pixelserv_ip' |' $H_TMP && output '[OK]\n' 2 || output '[FAIL]\n' 2
    rm -f $hosts_file
    output 'Sorting hosts file... ' 2 && sort $H_TMP | uniq > $hosts_file  && output '[OK]\n' 2 || output '[FAIL]\n' 2
    output '[OK]\n' 1

    output 'Whitelisting domains... ' 3
    whitelist_domains="${whitelist_domains}"$'\n'"$(cat $W_TMP)"
    for hf in ${whitelist_domains}; do 
    	hf=$(echo $hf | sed 's/\./\\./g')
        expr="$expr/$hf/d;"
    done
    sed -i "$expr" $hosts_file && output '[OK]\n' 3 || output '[FAIL]\n' 3

    output 'Removing temporary files... ' 3
    rm -f $H_TMP
    rm -f $D_TMP
    rm -f $W_TMP
    output '[OK]\n' 3
}

reload () {
    config_load adblock
    start_adblocking 'reload'
}

reload_service () {
    config_load adblock
    start_adblocking 'reload'
}

boot () {
    config_load adblock
    adblock_enabled || return 1
    sleep 30
    start_service
}

start () {
    config_load adblock
    adblock_enabled || return 1
    start_adblocking
}

start_service () {
    config_load adblock
    adblock_enabled || return 1
    start_adblocking
}

stop () {
    config_load adblock
	stop_adblocking
}

stop_service () {
    config_load adblock
	stop_adblocking
}

service_triggers () {
    procd_add_reload_trigger 'adblock'
}

[ "$1" = "setup" ] && setup
