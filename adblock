#!/bin/sh /etc/rc.common
# adblock init-script utilizing procd version 1.8 by stangri based on bole5's script.

START=99
USE_PROCD=1

EXTRA_COMMANDS="update setup"
EXTRA_HELP=<<EOF
    update  Updates the adblock script by downloading it from github repo
    setup   Fully sets up adblock script
EOF

H_TMP="/tmp/hosts.bad.tmp"
D_TMP="/tmp/domains.bad.tmp"
W_TMP="/tmp/hosts.white.tmp"

[ -s /bin/uclient-fetch ] && CLIENT='/bin/uclient-fetch' || CLIENT='/usr/bin/wget'

output()
{
        local level
        [ $# -eq 2 ] && level=$2 || level=1
        if [ $verbosity -eq 0 -a $level -eq 0 ]; then
        	logger -t "adblock[$(pidof adblock)]" "$(echo -e -n $1)"
        else
	        [ $verbosity -ge $level ] && echo -e -n "$1"
	    fi
        return 0
}

update()
{
    echo -e -n 'Updating /etc/init.d/adblock script... '
    $CLIENT --no-check-certificate -qO /etc/init.d/adblock.new https://raw.githubusercontent.com/stangri/openwrt-simple-adblock/master/adblock && mv /etc/init.d/adblock.new /etc/init.d/adblock && chmod +x /etc/init.d/adblock && echo -e -n  'Done!\n' || echo -e -n 'FAIL!\n' 
}

setup()
{
    local pixelservip=192.168.3.254
    echo 'Setting up Packages'
    opkg update  >/dev/null  2>&1
    opkg install uhttpd coreutils-sort >/dev/null 2>&1
    
    if [ -s /bin/uclient-fetch ]; then
    	[ ! -s /lib/libustream-ssl.so ] && opkg install libustream-mbedtls >/dev/null 2>&1
    else
    	opkg install wget libopenssl >/dev/null  2>&1
    fi

    echo 'Setting up PixelServ'
    if [ ! $(uci -q get uhttpd.pixelserv.listen_http) ]; then
	    mkdir /www_blank
	    echo -ne 'GIF89a1010\x8000\xff\xff\xff000!\xf9\x0400000,000010100\x02\x02D10;' | tr 01 '\000\001' > /www_blank/blank.gif
	    uci add uhttpd uhttpd
	    uci rename uhttpd.@uhttpd[-1]='pixelserv'
	    uci add_list uhttpd.@uhttpd[-1].listen_http='0.0.0.0:81'
	    uci set uhttpd.@uhttpd[-1].home='/www_blank'
	    uci set uhttpd.@uhttpd[-1].rfc1918_filter='1'
	    uci set uhttpd.@uhttpd[-1].max_requests='3'
	    uci set uhttpd.@uhttpd[-1].error_page='/blank.gif'
	    uci set uhttpd.@uhttpd[-1].index_page='blank.gif'
	    uci set uhttpd.@uhttpd[-1].network_timeout='30'
	    uci set uhttpd.@uhttpd[-1].tcp_keepalive='1'
	    uci commit uhttpd
	    /etc/init.d/uhttpd restart
    fi

    echo 'Setting up Firewall'
    grep -q "iptables -w -t nat -A prerouting_rule -p tcp -d $pixelservip --dport 80 -j REDIRECT --to-ports 81" /etc/firewall.user || echo "iptables -w -t nat -A prerouting_rule -p tcp -d $pixelservip --dport 80 -j REDIRECT --to-ports 81" >> /etc/firewall.user
    grep -q "iptables -w -t nat -A prerouting_rule -p tcp -d $pixelservip -j ACCEPT" /etc/firewall.user || echo "iptables -w -t nat -A prerouting_rule -p tcp -d $pixelservip -j ACCEPT" >> /etc/firewall.user
    grep -q "iptables -w -A forwarding_rule -d $pixelservip -j REJECT" /etc/firewall.user || echo "iptables -w -A forwarding_rule -d $pixelservip -j REJECT" >> /etc/firewall.user
    /etc/init.d/firewall reload >/dev/null  2>&1

    echo 'Setting up Adblock Config'
    [ -f /etc/config/adblock ] && rm /etc/config/adblock
    touch /etc/config/adblock
    uci set adblock.config='adblock'
    uci set adblock.config.enabled='1'
    uci set adblock.config.verbosity='2'
    uci set adblock.config.pixel_server_ip="$pixelservip"
    uci set adblock.config.hosts_file='/tmp/hosts/hosts.bad'
    uci add_list adblock.config.whitelist_domains='github.com'
    uci add_list adblock.config.whitelist_domains='raw.githubusercontent.com'
#   uci add_list adblock.config.blacklist_domains='adblocktesting.com'
#	uci add_list adblock.config.bad_hosts='https://raw.githubusercontent.com/stangri/openwrt-simple-adblock/master/hosts.blocked'
#	uci add_list adblock.config.bad_domains='https://raw.githubusercontent.com/stangri/openwrt-simple-adblock/master/domains.blocked'
#	uci add_list adblock.config.whitelist_urls='https://raw.githubusercontent.com/stangri/openwrt-simple-adblock/master/domains.whitelisted'
	uci add_list adblock.config.bad_hosts='http://pgl.yoyo.org/as/serverlist.php?hostformat=hosts&showintro=1&mimetype=plaintext'	# 63Kb
	uci add_list adblock.config.bad_hosts='http://www.mvps.org/winhelp2002/hosts.txt'												# 499Kb
	uci add_list adblock.config.bad_hosts='http://www.malwaredomainlist.com/hostslist/hosts.txt'									# 48Kb
	uci add_list adblock.config.bad_hosts='http://adaway.org/hosts.txt'																# 13Kb
	uci add_list adblock.config.bad_hosts='http://someonewhocares.org/hosts/hosts'													# 353Kb
	uci add_list adblock.config.bad_hosts='https://zeustracker.abuse.ch/blocklist.php?download=hostfile'							# 12Kb
	uci add_list adblock.config.bad_domains='https://palevotracker.abuse.ch/blocklists.php?download=domainblocklist'				# 1Kb
	uci add_list adblock.config.bad_domains='http://mirror1.malwaredomains.com/files/justdomains'									# 315Kb
	uci add_list adblock.config.bad_domains='https://s3.amazonaws.com/lists.disconnect.me/simple_malvertising.txt'					# 93Kb
	uci add_list adblock.config.bad_domains='http://dshield.org/feeds/suspiciousdomains_High.txt'									# 69Kb
#	uci add_list adblock.config.bad_hosts='http://sysctl.org/cameleon/hosts.win'													# 638Kb
#	uci add_list adblock.config.bad_hosts='http://hosts-file.net/.\ad_servers.txt'													# 1.7Mb
#	uci add_list adblock.config.bad_hosts='http://hostsfile.mine.nu/Hosts'															# 2.8Mb
#	uci add_list adblock.config.bad_hosts='http://support.it-mate.co.uk/downloads/hosts.txt'										# 11.3Mb
    uci commit adblock
    grep -q '30 3 1 \* \* /etc/init.d/adblock reload 2>&1 >> /tmp/adblock.log' /etc/crontabs/root || echo '30 3 1 * * /etc/init.d/adblock reload 2>&1 >> /tmp/adblock.log' >> /etc/crontabs/root
    [ ! -f /etc/banner.orig ] && cp /etc/banner /etc/banner.orig && sed -i '$i \[ -f /etc/banner.orig ] && cp /etc/banner.orig /etc/banner' /etc/rc.local

    exit 0
}

adblock_enabled() {
    local enabled
    config_get_bool enabled 'config' 'enabled' 0
    [ $enabled -gt 0 ] && return 0
    logger -s -t "adblock[$(pidof adblock)]" "adblock is not enabled in the config file"
    logger -s -t "adblock[$(pidof adblock)]" "To enable, run 'uci set adblock.config.enabled=1'"
    return 1
}

create_bad_hosts_file () {
    local hosts_file
    local bad_hosts
    local pixelserv_ip
    local whitelist_domains
    local whitelist_urls
    local hf
    local expr

    config_get host_file            'config' 'hosts_file' '/tmp/hosts/hosts.bad'
    config_get pixelserv_ip         'config' 'pixel_server_ip' '127.0.0.1'
    config_get bad_hosts            'config' 'bad_hosts'
    config_get bad_domains          'config' 'bad_domains'
    config_get whitelist_domains    'config' 'whitelist_domains'
    config_get blacklist_domains    'config' 'blacklist_domains'
    config_get whitelist_urls       'config' 'whitelist_urls'
    config_get verbosity            'config' 'verbosity' '0'
    config_get force_dns            'config' 'force_dns' '0'

    [ ! -d /tmp/hosts/ ] && mkdir -p /tmp/hosts/
    [ "$(cat /tmp/etc/dnsmasq.conf | grep addn-hosts)" != "addn-hosts=/tmp/hosts" ] && uci add_list dhcp.@dnsmasq[0].addnhosts='/tmp/hosts' && uci commit dhcp

    touch $H_TMP
    touch $D_TMP
    touch $W_TMP
    output 'Downloading bad hosts... '
    output '\n' 2
    for hf in ${bad_hosts}; do
        output "$hf... " 2 && $CLIENT --no-check-certificate -qO- "${hf}" >> $H_TMP && output 'Done!\n' 2 || output 'FAIL!\n' 2
    done
    output 'Done!\n\n'
    
    for hf in ${blacklist_domains}; do echo "$hf" >> $D_TMP; done
    output 'Downloading & processing bad domains... '
    output '\n' 2
    for hf in ${bad_domains}; do
        output "$hf... " 2 && $CLIENT --no-check-certificate -qO- "${hf}" >> $D_TMP && output 'Done!\n' 2 || output 'FAIL!\n' 2
    done
    sed '/^#/!s/^/127.0.0.1 /' $D_TMP >> $H_TMP
    output 'Done!\n\n'

    output 'Downloading whitelisted hosts... '
    output '\n' 2
    for hf in ${whitelist_urls}; do
        output "$hf... " 2 && $CLIENT --no-check-certificate -qO- "${hf}" >> $W_TMP && output 'Done!\n' 2 || output 'FAIL!\n' 2
    done
    output 'Done!\n\n'

    output 'Tidying up the hosts file... '
    output '\n' 2
    output 'SEDing hosts file... ' 2 && sed -i '/localhost/d;s/^0\.0\.0\.0.//;s/^127\.0\.0\.1.//;s/[[:cntrl:]]$//;s/[[:cntrl:]]$/ /;/^#/d;/^$/d;s/[[:space:]]*#.*$//;s/^ //;s/^  //;s|^|'$pixelserv_ip' |' $H_TMP && output 'Done!\n' 2 || output 'FAIL!\n' 2
    rm -f $host_file
    output 'Sorting hosts file... ' 2 && sort $H_TMP | uniq > $host_file  && output 'Done!\n' 2 || output 'FAIL!\n' 2

    output 'Excluding whitelisted domains... ' 2
    whitelist_domains="${whitelist_domains}"$'\n'"$(cat $W_TMP)"
    for hf in ${whitelist_domains}; do 
        expr="$expr/$hf/d;"
    done
    sed -i "$expr" $host_file && output 'Done!\n' 2 || output 'FAIL!\n' 2
    output 'Done!\n\n'

    output 'Cleaning up temp files... '
    rm -f $H_TMP
    rm -f $D_TMP
    rm -f $W_TMP
    output 'Done!\n\n'

	if [ $force_dns -ne 0 ]; then
		local ip=$(uci -q -P/var/state get network.lan.ipaddr)
		local ip6=$(echo $(uci -q -P/var/state get network.globals.ula_prefix) | cut -d/ -f1) && [ "$ip6" ] && ip6=${ip6}1
		local nrst=0
		local label
		if [ ! -z $ip -a ! -z $ip6 ]; then
			grep -q "ip6tables -t nat -A PREROUTING -i br-lan -p udp --dport 53 -j DNAT --to-destination [$ip6]" /etc/firewall.user || nrst=1; echo "ip6tables -t nat -A PREROUTING -i br-lan -p udp --dport 53 -j DNAT --to-destination [$ip6]" >> /etc/firewall.user
			grep -q "ip6tables -t nat -A PREROUTING -i br-lan -p tcp --dport 53 -j DNAT --to-destination [$ip6]" /etc/firewall.user || nrst=1; echo "ip6tables -t nat -A PREROUTING -i br-lan -p tcp --dport 53 -j DNAT --to-destination [$ip6]" >> /etc/firewall.user
		fi
		if [ ! -z $ip ]; then
			grep -q "iptables -t nat -A prerouting_rule -i br-lan -p udp --dport 53 -j DNAT --to $ip" /etc/firewall.user || nrst=1; echo "iptables -t nat -A prerouting_rule -i br-lan -p udp --dport 53 -j DNAT --to $ip" >> /etc/firewall.user
			grep -q "iptables -t nat -A prerouting_rule -i br-lan -p tcp --dport 53 -j DNAT --to $ip" /etc/firewall.user || nrst=1; echo "iptables -t nat -A prerouting_rule -i br-lan -p tcp --dport 53 -j DNAT --to $ip" >> /etc/firewall.user
			[ -z $ip6 ] && label="$ip" || label="$ip/$ip6"
			if [ $nrst -eq 1 ]; then
				/etc/init.d/firewall reload >/dev/null  2>&1
				[ $? -eq 0 ] && output "Forcing local DNS server: $label.\n" 0 || output 'ERROR: Failed to restart firewall!\n' 0
			else
				output "Already forcing local DNS server: $label.\n" 0
			fi
		else
			output 'ERROR: Failed to obtain LAN IP address for DNS forcing!\n' 0
		fi
	fi

	if [ -s $host_file ]; then
		/etc/init.d/dnsmasq restart
		if [ $? -eq 0 ]; then 
			output "Service started: blocking $(wc -l < $host_file) domains.\n" 0 
			[ -f /etc/banner.orig ] && cp /etc/banner.orig /etc/banner && sed -i 's/)/ + ADBlock)/' /etc/banner
		else 
			output 'ERROR: Failed to restart DNSMASQ!\n' 0
			exit 1
		fi
	else
		output 'ERROR: Failed to create adblock list!\n' 0
		exit 1
	fi    
}

reload () {
    config_load adblock
    create_bad_hosts_file
}

reload_service () {
    config_load adblock
    create_bad_hosts_file
}

boot () {
    config_load adblock
    adblock_enabled || return 1
    sleep 60
    start_service
}

start () {
    config_load adblock
    adblock_enabled || return 1
    create_bad_hosts_file
}

start_service () {
    config_load adblock
    adblock_enabled || return 1
    create_bad_hosts_file
}

stop () {
    config_load adblock
    config_get host_file 'config' 'hosts_file' '/var/hosts/hosts.bad'
    config_get verbosity            'config' 'verbosity' '0'
    config_get force_dns            'config' 'force_dns' '0'
    local nrst=0
	if [ $force_dns -ne 0 ]; then
		grep -q 'ip6tables -t nat -A PREROUTING -i br-lan -p udp --dport 53 -j DNAT --to-destination' /etc/firewall.user || nrst=1; sed -i '/ip6tables -t nat -A PREROUTING -i br-lan -p udp --dport 53 -j DNAT --to-destination/d' /etc/firewall.user
		grep -q 'ip6tables -t nat -A PREROUTING -i br-lan -p tcp --dport 53 -j DNAT --to-destination' /etc/firewall.user || nrst=1; sed -i '/ip6tables -t nat -A PREROUTING -i br-lan -p tcp --dport 53 -j DNAT --to-destination/d' /etc/firewall.user
		grep -q 'iptables -t nat -A prerouting_rule -i br-lan -p udp --dport 53 -j DNAT --to' /etc/firewall.user || nrst=1; sed -i '/iptables -t nat -A prerouting_rule -i br-lan -p udp --dport 53 -j DNAT --to/d' /etc/firewall.user
		grep -q 'iptables -t nat -A prerouting_rule -i br-lan -p tcp --dport 53 -j DNAT --to' /etc/firewall.user || nrst=1; sed -i '/iptables -t nat -A prerouting_rule -i br-lan -p tcp --dport 53 -j DNAT --to/d' /etc/firewall.user
		if [ $nrst -eq 1 ]; then
			/etc/init.d/firewall reload >/dev/null  2>&1
			[ $? -eq 0 ] && output 'Stopped forcing local DNS server.\n' 0 || output 'ERROR: Failed to reload firewall!\n' 0
		fi
	fi
    [ -f /etc/banner.orig ] && cp /etc/banner.orig /etc/banner
    [ -f $host_file ] && rm -r $host_file
    /etc/init.d/dnsmasq restart
	[ $? -eq 0 ] && output "Service stopped.\n" 0 || output 'ERROR: Failed to restart DNSMASQ!\n' 0
}

stop_service () {
    config_load adblock
    config_get host_file 'config' 'hosts_file' '/var/hosts/hosts.bad'
    config_get verbosity            'config' 'verbosity' '0'
    config_get force_dns            'config' 'force_dns' '0'
    local nrst=0
	if [ $force_dns -ne 0 ]; then
		grep -q 'ip6tables -t nat -A PREROUTING -i br-lan -p udp --dport 53 -j DNAT --to-destination' /etc/firewall.user || nrst=1; sed -i '/ip6tables -t nat -A PREROUTING -i br-lan -p udp --dport 53 -j DNAT --to-destination/d' /etc/firewall.user
		grep -q 'ip6tables -t nat -A PREROUTING -i br-lan -p tcp --dport 53 -j DNAT --to-destination' /etc/firewall.user || nrst=1; sed -i '/ip6tables -t nat -A PREROUTING -i br-lan -p tcp --dport 53 -j DNAT --to-destination/d' /etc/firewall.user
		grep -q 'iptables -t nat -A prerouting_rule -i br-lan -p udp --dport 53 -j DNAT --to' /etc/firewall.user || nrst=1; sed -i '/iptables -t nat -A prerouting_rule -i br-lan -p udp --dport 53 -j DNAT --to/d' /etc/firewall.user
		grep -q 'iptables -t nat -A prerouting_rule -i br-lan -p tcp --dport 53 -j DNAT --to' /etc/firewall.user || nrst=1; sed -i '/iptables -t nat -A prerouting_rule -i br-lan -p tcp --dport 53 -j DNAT --to/d' /etc/firewall.user
		if [ $nrst -eq 1 ]; then
			/etc/init.d/firewall reload >/dev/null  2>&1
			[ $? -eq 0 ] && output 'Stopped forcing local DNS server.\n' 0 || output 'ERROR: Failed to reload firewall!\n' 0
		fi
	fi
    [ -f /etc/banner.orig ] && cp /etc/banner.orig /etc/banner
    [ -f $host_file ] && rm -r $host_file
    /etc/init.d/dnsmasq restart
	[ $? -eq 0 ] && output "Service stopped.\n" 0 || output 'ERROR: Failed to restart DNSMASQ!\n' 0
}

service_triggers() {
    procd_add_reload_trigger 'adblock'
}
